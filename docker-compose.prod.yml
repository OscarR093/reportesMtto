version: '3.8'

services:
  # Servicio principal para la aplicaci√≥n de reportes
  app:
    image: oscarr093/reportes-mtto:1.0
    container_name: reportes-mtto-app
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_USE_SSL=${MINIO_USE_SSL}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_DEFAULT_BUCKETS=${MINIO_DEFAULT_BUCKETS}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SUPER_ADMIN_EMAIL=${SUPER_ADMIN_EMAIL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_CALLBACK_URL=${GOOGLE_CALLBACK_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - mi-red
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.reportes-mtto.rule=Host(`${REPORTES_DOMAIN}`)"
      - "traefik.http.routers.reportes-mtto.entrypoints=websecure"
      - "traefik.http.routers.reportes-mtto.tls.certresolver=letsencrypt"
      - "traefik.http.services.reportes-mtto.loadbalancer.server.port=3002"

  postgres:
    image: postgres:15-bullseye
    container_name: reportes_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: reportes_mtto
      POSTGRES_USER: reportes_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mi-red
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reportes_user -d reportes_mtto"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-bullseye
    container_name: reportes_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - mi-red
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: reportes_minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_DEFAULT_BUCKETS: evidencias,avatars,documents
    volumes:
      - minio_data:/data
    networks:
      - mi-red
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  postgres_data:
  minio_data:
  redis_data:

networks:
  mi-red:
    external: true
    name: monitoreotermico_mi-red
